# Lucid In Parallel

```{r lucid in parallel setup, include = FALSE, echo = FALSE}
source(fs::path(here::here(),"0_project_setup","libraries.R"))
source(fs::path(here::here(),"0_project_setup","directories.R"))
source(fs::path(here::here(),"0_project_setup","load_simu_data.R"))
# Load functions
source(fs::path(dir_fxn, "load_functions.R"))
source(fs::path(dir_fxn, "lucid_reorder_plot_without_y.R"))
#source(fs::path(dir_fxn, "lucid_parallel.R"))
source(fs::path(dir_fxn, "LUCIDusM in Parallel Sankey fxn Plotly.R"))
source(fs::path(dir_fxn, "LUCIDusM_get_pips.R"))
source(fs::path(dir_fxn, "plot_lucid_networks.R"))
source(fs::path(here::here(), 
                "0_project_setup", "functions", "LUCIDus",
                "dependency.R"))
library(htmlwidgets)
library(ggrepel)
# Load necessary libraries
library(igraph)
library(ggraph)
library(ggforce)
library(graphlayouts)

options(knitr.table.format = "html")
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
```

```{r data preparation lucid in parallel}
meta_df <- data.frame(ftr_name = c(colnames(omics_lst$methylome),
                                   colnames(omics_lst$transcriptome),
                                   colnames(omics_lst$miRNA))) %>%
  mutate(omic_layer = get_omic_layer_lowercase(ftr_name) ) |>
  tidylog::left_join(omics_names |> dplyr::select(-omic_layer))  |>
  # Modify names of features for plotting
  tidylog::mutate(
    ftr_name_for_plots = case_when(
      ftr_name_for_plots == "---" ~ paste0(ftr_name, " (NONCODE)"),
      ftr_name_for_plots == "" ~ ftr_name,
      str_detect(ftr_name_for_plots, ";") ~ str_split_fixed(ftr_name_for_plots, ";", 2)[,1],
      str_detect(ftr_name_for_plots, "//") ~ str_split_fixed(ftr_name_for_plots, "//", 3)[,2],
      TRUE ~ ftr_name_for_plots)) |>
  select(ftr_name_for_plots, ftr_name, omic_layer) 

methylation_meta_df <- meta_df %>% filter(omic_layer == "methylome")
transcriptome_meta_df <- meta_df %>% filter(omic_layer == "transcriptome")
mirna_meta_df <- meta_df %>% filter(omic_layer == "mirna")
# 
omics_lst_nmd_ftr <- omics_lst %>% 
  modify(., as.data.frame)

setnames(omics_lst_nmd_ftr$methylome, 
         old = c(methylation_meta_df$ftr_name), 
         new = c(methylation_meta_df$ftr_name_for_plots))

setnames(omics_lst_nmd_ftr$transcriptome, 
         old = c(transcriptome_meta_df$ftr_name),
         new = c(transcriptome_meta_df$ftr_name_for_plots))

#setnames(omics_lst_nmd_ftr$miRNA, 
         #old = c(mirna_meta_df$ftr_name),
         #new = c(mirna_meta_df$ftr_name_for_plots))
```

### Lucid with 3 omics layers in parallel

```{r lucid in parallel, echo=FALSE, cache=FALSE, results=FALSE, warning=FALSE, comment=FALSE, warning=FALSE, fig.height= 15,fig.width= 12}
G = exposure %>% as.matrix()
Z = omics_lst[c(1:3)]
Y = outcome 

fit <- estimate_lucid(lucid_model = "parallel",
  G = G, 
  Z = Z, 
  Y = Y,
  K = rep(2, length(Z)), 
  family = "normal", 
  max_itr = 200, 
  useY = TRUE, 
  modelName = "EEV")

# Reorder the clusters
fit_reordered <- reorder_lucidM(fit, reference = c(1,1,2))
```

### Sankey diagram

```{r sankey diagram plotly lucid in parallel, message = FALSE, warning = FALSE,fig.height= 12, fig.width= 10}
(fig <- plot_lucid_in_parallel_plotly(fit_reordered,
                                      sankey_colors = sankey_colors,
                                      text_size = 20,
                                      n_z_ftrs_to_plot = c(7,7,7)))
```

### Omics profiles for each cluster predicted by LUCID

```{r omics profiles lucid in parellel, fig.height= 8, fig.width= 10}
M_mean =    as_tibble(fit$res_Mu_Sigma$Mu[[1]], rownames = "variable") %>%
  bind_rows(as_tibble(fit$res_Mu_Sigma$Mu[[2]], rownames = "variable")) %>%
  bind_rows(as_tibble(fit$res_Mu_Sigma$Mu[[3]], rownames = "variable"))

# g_mean = as.data.frame(fit$pars$beta)
# M_mean <- bind_cols(M_mean, g_mean) |> select(-intercept)
# M_mean$cluster = as.factor(1:2)
# M_mean_melt = reshape::melt(M_mean, id.vars = "cluster") 

# Reorder results because mirna order is reversed
M_mean1 <- M_mean %>% 
  bind_cols(meta_df) %>%
  mutate(`Low Risk`  =  if_else(omic_layer == "mirna", V2, V1), 
         `High Risk` =  if_else(omic_layer == "mirna", V1, V2)) %>%
  dplyr::select(-c("V1", "V2"))

# Pivot longer for figure 
M_mean_l <- M_mean1 %>% 
  pivot_longer(cols = c(`Low Risk`, `High Risk`),
               names_to = "cluster",
               values_to = "value")

# add color label for omics layer
M_mean2 = M_mean_l |>
  mutate(color_label = case_when(omic_layer == "methylome" ~ "1", 
                                 omic_layer == "transcriptome" ~ "2", 
                                 omic_layer == "mirna" ~ "3"), 
         low_high = if_else(str_detect(cluster, "Low"), 0,1),
         omic = if_else(omic_layer == "mirna", 
                        "miR",
                        str_sub(omic_layer, end = 1) |> toupper()),
         omic_cluster = str_c(omic, low_high))

# Filter only the top ## differential expressed features 
M_mean2_top <- M_mean2 |> 
  group_by(variable) |> 
  tidylog::filter(abs(value) == max(abs(value))) |> 
  ungroup() |> 
  arrange(max(abs(value))) |> 
  group_by(omic_layer) |> 
  tidylog::slice_head(n=12) |>
  ungroup()

# Plots top 12 features
ggplot(M_mean2  |> filter(variable %in% M_mean2_top$variable),
       aes(fill = color_label, y = value, x = variable)) +
  geom_bar(position="dodge", stat="identity") +
  ggtitle("Omics profiles for 2 latent clusters - Lucid in Parallel") +
  facet_grid(rows = vars(cluster),
             cols = vars(omic_layer), scales = "free_x", space = "free") +
  theme(legend.position="none") +
  geom_hline(yintercept = 0) +
  xlab("") +
  theme(text = element_text(size=10),
        axis.text.x = element_text(angle = 90, vjust = 1,
                                   hjust = 1),
        plot.margin = margin(10, 10, 10, 80),
        panel.background = element_rect(fill="white"),
        strip.background = element_rect(fill = "white"),
        axis.line.x = element_line(color = "black"),
        axis.line.y = element_line(color = "black"),) +
  scale_fill_manual(values = c("#2fa4da", "#A77E69", "#e7b6c1"))
```

### Calculate PIPs and determine cluster assignment for each participant

```{r get pips}
lucid_pips <- get_pips(fit) |> as_tibble()

# Add rownames, exposures, and outcome
lucid_pips$helixid <- outcomes$helixid
lucid_pips$exposure <- exposure
lucid_pips$outcome <- outcome

# Create variable for combinations of clusters 
lucid_pips <- lucid_pips |> 
  mutate(cluster_assignment = paste0("M", l1_pred, "_T", l2_pred, "_miR", l3_pred))
```

### Examine how cluster assignment is associated with exposures and outcomes

```{r pips with exposure and outcome}
# Association of each cluster with the exposure
exposures_per_group <- lm(exposure ~ cluster_assignment - 1, data = lucid_pips) |>
  tidy(conf.int = TRUE) |>
  mutate(term = str_remove(term, "cluster_assignment"),
         exp_out = "exposure")  |>
  rename(cluster_assignment = term)

# Association of each cluster with the outcome
outcomes_per_group <- lm(outcome ~ cluster_assignment - 1, data = lucid_pips) |>
  tidy(conf.int = TRUE) |> 
  mutate(term = str_remove(term, "cluster_assignment"), 
         exp_out = "outcome")  |>
  rename(cluster_assignment = term)

# Combine Exposures and outcomes
exp_out_by_group <- bind_rows(exposures_per_group, outcomes_per_group)

# Get sample size per cluster 
lucid_clusters_sample_size <- lucid_pips |> 
  group_by(cluster_assignment) |>
  summarise(n = length(cluster_assignment)) |> 
  ungroup()

# Combine PIPs with sample size per cluster 
lucid_clusters <- lucid_clusters_sample_size |>
  tidylog::left_join(exp_out_by_group) |> 
  mutate(m = str_sub(cluster_assignment, end = -9), 
         t = str_sub(cluster_assignment, start = 4, end = 5),
         p = str_sub(cluster_assignment, start = 7)) |>
  select(m, t, p, everything()) |>
  janitor::clean_names()

# Make group names
lucid_clusters <- lucid_clusters |> 
  mutate(
    group_name = case_when(
      cluster_assignment == "M0_T0_miR1" ~ "Group 1",
      cluster_assignment == "M0_T1_miR1" ~ "Group 2",
      cluster_assignment == "M0_T0_miR0" ~ "Group 3",
      cluster_assignment == "M0_T1_miR0" ~ "Group 4",
      cluster_assignment == "M1_T0_miR1" ~ "Group 5",
      cluster_assignment == "M1_T1_miR0" ~ "Group 6",
      cluster_assignment == "M1_T0_miR0" ~ "Group 7",
      cluster_assignment == "M1_T1_miR1" ~ "Group 8"))


# Pivot wider on exposures and outcomes
lucid_clusters_w <- lucid_clusters |>
  tidylog::pivot_wider(names_from = "exp_out", 
                       values_from = c(estimate:conf_high))


# Visualize clusters by exposure and outcome levels
ggplot(lucid_clusters_w, 
       aes(x = estimate_exposure, y = estimate_outcome, 
           label = group_name)) + 
  geom_text() +
  ggrepel::geom_label_repel(aes(label = cluster_assignment)) 

# Combine individual level data with summary data 
lucid_pips_fin <- lucid_pips |> 
  tidylog::left_join(lucid_clusters_w)
```

### Visualize Omics Profiles

```{r visualize profiles}
## MAKE omics profiles for each of the 8 clusters 
top_ftrs <- M_mean2 |> filter(variable %in% M_mean2_top$variable)

# Order omic layers
top_ftrs <- top_ftrs |> 
  mutate(omic_layer = fct_relevel(omic_layer, 
                                  c("methylome", "mirna", "transcriptome")), 
         omic_cluster_named = paste(cluster, str_to_title(omic_layer))) |>
  arrange(omic_layer) |> 
  mutate(omic_cluster_named = fct_inorder(omic_cluster_named))


# Sort by the magnitude of association with high risk cluster
top_ftrs <- top_ftrs |> 
  arrange(-low_high) |> 
  group_by(variable) |>
  mutate(high_risk_value = value[1]) |>
  ungroup() |>
  arrange(omic_cluster_named, high_risk_value) |> 
  mutate(variable = fct_inorder(variable))

# Plot omics profile ----
omics_profile_plot <- function(clusters_to_include, 
                               vjust = 0, 
                               text_size = 4.5){
  ggplot(top_ftrs |> filter(omic_cluster %in% clusters_to_include), 
         aes(fill = color_label, x = value, y = fct_rev(variable))) +
    geom_bar(position="dodge", stat="identity") + #, color = "white"
    geom_vline(xintercept = 0, color = "grey50") +
    xlim(c(-1.16, 2.11)) + # MODIFY THIS TO ALIGN WITH EXPOSURE/OUTCOME FIGURE -------------
  xlab(NULL) + ylab(NULL) +
    theme(legend.position="none", 
          text = element_text(size=10),
          # axis.text.x = element_text(angle = 90, vjust = 1,hjust = 1),
          strip.background = element_rect(fill = "white"), 
          axis.line = element_blank(), 
          strip.text = element_blank(),
          axis.ticks = element_blank(), 
          axis.text = element_blank()) +
    scale_fill_manual(values = c(col_pal[1], col_pal[2], col_pal[3])) +  #2fa4da 
    annotate(geom = "text", 
             x = ifelse(clusters_to_include[1] == "M1", 0.02,-0.89), 
             y = 22, ## y position
             hjust = 0, 
             vjust = vjust,
             label = paste("Methylation\nProfile", 
                           str_sub(clusters_to_include[1], -1)),
             lineheight = 0.75, color = col_pal[1], size = text_size) + 
        annotate(geom = "text",  
             x = ifelse(clusters_to_include[3] == "miR1", 0.02,-0.89), 
             y = 10, ## y position
             hjust = 0, 
             vjust = vjust+.1,
             label = paste("miRNA\nProfile ",  
                           str_sub(clusters_to_include[3], -1)),
             lineheight = 0.75, color = col_pal[3], size = text_size) +
    annotate(geom = "text",  x = -0.89, y = 0, ## y position
             hjust = 0, 
             vjust = vjust+.5,
             label = paste("Transcript\nProfile", 
                           str_sub(clusters_to_include[2], -1)),
             lineheight = 0.75, color = col_pal[2], size = text_size)
}


vjust_profile_nms <- -.9
gp1_omics = omics_profile_plot(c("M0", "T0", "miR1"), vjust = vjust_profile_nms)
gp2_omics = omics_profile_plot(c("M0", "T1", "miR1"), vjust = vjust_profile_nms)
gp3_omics = omics_profile_plot(c("M0", "T0", "miR0"), vjust = vjust_profile_nms)
gp4_omics = omics_profile_plot(c("M0", "T1", "miR0"), vjust = vjust_profile_nms)
gp5_omics = omics_profile_plot(c("M1", "T0", "miR1"), vjust = vjust_profile_nms)
gp6_omics = omics_profile_plot(c("M1", "T1", "miR0"), vjust = vjust_profile_nms)
gp7_omics = omics_profile_plot(c("M1", "T0", "miR0"), vjust = vjust_profile_nms)
gp8_omics = omics_profile_plot(c("M1", "T1", "miR1"), vjust = vjust_profile_nms)



# Exposure and outcome bargraph by cluster
group_to_plot <- "Group 1"
exposure_plot_fxn  <- function(group_to_plot, text_just = -.15, size = 4.7) {
  ( base_plot <- ggplot(lucid_clusters %>% 
                          filter(group_name == group_to_plot) |> 
                          mutate(estimate = if_else(estimate>1.3, 1.3, estimate)),
                        aes(y = fct_rev(str_to_sentence(exp_out)),
                            x = estimate,
                            fill = exp_out, 
                            label = if_else(exp_out == "outcome", "Outcome", "Exposure"))) +
      geom_bar(stat = "identity", color = "black", width = 1.1) + 
      geom_vline(xintercept = 0, color = "grey50") +
      geom_text(aes(x = if_else(estimate < 0, estimate, 0)), 
                hjust=1.05, size = size, fontface = "italic") +
      scale_fill_manual(values = c(sankey_colors$range[sankey_colors$domain == "exposure"], 
                                   sankey_colors$range[sankey_colors$domain == "Outcome"])) +
      facet_wrap(~exp_out, ncol = 1, scales = "free_y") +
      xlim(c(-1.1, 2.1)) + # MODIFY HERE TO ALIGN ---------
    theme_void() + 
      theme(legend.position = "none", axis.text = element_blank(),
            axis.title = element_blank(), strip.text = element_blank())) 
}  

# Exposure 
eo_figs <- purrr::map(unique(lucid_clusters$group_name),
                      .f = exposure_plot_fxn)
names(eo_figs) <- unique(lucid_clusters$group_name)

# Combine
(profile_fig <- plot_grid(
  NULL, NULL, eo_figs[["Group 1"]], eo_figs[["Group 5"]], gp1_omics, gp5_omics,   
  NULL, NULL, eo_figs[["Group 2"]], eo_figs[["Group 6"]], gp2_omics, gp6_omics,   
  NULL, NULL, eo_figs[["Group 3"]], eo_figs[["Group 7"]], gp3_omics, gp7_omics,  
  NULL, NULL, eo_figs[["Group 4"]], eo_figs[["Group 8"]], gp4_omics, gp8_omics,  
  ncol = 2,
  label_size = 16,
  label_fontface = "bold",
  vjust = 1.2,
  rel_heights = rep(c(.17,.22,1), 4),
  align = "v",
  axis = "lv",
  labels = c("Group 1", "Group 5", rep("", 4),
             "Group 2", "Group 6", rep("", 4),
             "Group 3", "Group 7", rep("", 4),
             "Group 4", "Group 8", rep("", 4))))


# ggsave(profile_fig, 
#        file = fs::path(dir_figs,
#                        "4_integrated_latent_unknown_clusters", 
#                        "Exp_out_Omics_profiles_lucidusM.jpeg"), 
#        width = 8, height = 9)
```

### Network diagram of participants based on PIPs

```{r Network Diagram}
## BASE OF THE FINAL FIGURE ----
(exposure_plot2 <- ggplot(lucid_clusters_w,
                          aes(x = estimate_exposure,
                              y = estimate_outcome,
                              label = group_name,
                              color = cluster_assignment)) +
   # geom_point(aes(x = exposure, y = outcome),
   #            data = lucid_pips,
   #            inherit.aes = TRUE, alpha = .4) +
   geom_label_repel(color = "black", min.segment.length = 0) +
   geom_point(size = 3) + 
   theme(legend.position = "none"))

# Subset the data frame to get only the relevant columns
df_subset <- lucid_pips_fin %>% select(pip_l1_c2, pip_l2_c2, pip_l3_c2)
rownames(df_subset) <- lucid_pips$helixid
# Compute a distance matrix
dist_matrix <- dist(df_subset)

# Build a graph object from the distance matrix
g_full <- graph_from_adjacency_matrix(as.matrix(dist_matrix),
                                      mode = "undirected", 
                                      weighted = TRUE)

# Assign names to the vertices in the graph
V(g_full)$cluster_assignment <- lucid_pips_fin$cluster_assignment
V(g_full)$group_name <- lucid_pips_fin$group_name

# Delete edges
g <- g_full |> 
  delete_edges(which(E(g_full)$weight > .7)) 

# Backbone layout
bb <- layout_as_backbone(g,keep=.01)
xy <- layout_rotate(bb$xy, angle = 90)
xy <- layout_mirror(bb$xy)
# Categorize var indicating starting vertices group based on M0 or M1 clusters
starting_v <- str_remove(as_ids(E(g)), "\\|.*")
m1_index <- starting_v %in% lucid_pips_fin$helixid[lucid_pips_fin$m == "M1"]
E(g)$col <- "M0"
E(g)$col[m1_index] <- "M1"

# Visualize without changing centroids
ggraph_fxn(g = g, x=xy[,1],y=xy[,2], label_groups = TRUE)

## Shift the centroids of the groups ----
actual_centroids <- lapply(unique(V(g)$group_name), function(cluster) {
  nodes <- xy[V(g)$group_name == cluster,]
  calculate_centroid(nodes)
})
names(actual_centroids) <- unique(V(g)$group_name)

# # Specify the desired centroid of each cluster
centroid_list <- lucid_clusters_w |>
  dplyr::select(estimate_exposure, estimate_outcome) |>
  as.matrix()
desired_centroids <-  split(f = lucid_clusters_w$group_name, 
                            x = (((log(centroid_list+2))*30)))

final_centroid <- desired_centroids
final_centroid[["Group 6"]][2] <- 0.8*desired_centroids[["Group 6"]][2]
final_centroid[["Group 8"]][1] <- 0.8*desired_centroids[["Group 8"]][1]

# desired_centroids = actual_centroids

# Shift the nodes in each cluster
xy_shifted <- xy
for (cluster in names(final_centroid)) {
  shift <- final_centroid[[cluster]] - actual_centroids[[cluster]]
  xy_shifted[V(g)$group_name == cluster,] <-
    shift_nodes(xy[V(g)$group_name == cluster,], shift)
}

# Visualize
(network_fig_pannel = ggraph_fxn(g = g, x=xy_shifted[,1],y=xy_shifted[,2],
                                 label_groups = T, label.fontsize = 20))
# Save
#<<<<<<< HEAD
ggsave(network_fig_pannel, 
       file = fs::path(dir_figs, 
                       "4_integrated_latent_unknown_clusters",
                       "lucidusM_clusters.jpeg"), 
       width = 7, height = 10)
#=======
 ggsave(network_fig_pannel, 
        file = fs::path(dir_figs, 
                        "4_integrated_latent_unknown_clusters",
                       "lucidusM_clusters_grp1_4.jpeg"), 
        width = 7, height = 10)
#>>>>>>> ba928559381c791ee3f0608b9edda30deb1d6bc4

```
