# High Dimensional Mediation {#sec-HIMA}

## Set up project for High Dimensional Mediation Analysis

```{r 0. setup, include = TRUE, echo = TRUE, message=FALSE}
source(fs::path(here::here(),"project_setup","directories.R"))
source(fs::path(dir_proj,"libraries.R"))

source(fs::path(dir_proj, "load_simu_data.R"))
source(fs::path(dir_proj, "functions","load_functions.R"))
source(fs::path(dir_proj, "functions", "hima_functions.R"))

options(knitr.table.format = "html")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

## *Early integration*

```{r 1. early integration analysis}
# Run Analysis
result_hima_early <- hima_early_integration(exposure = exposure,
                                            outcome = outcome, 
                                            omics_lst = omics_lst, 
                                            covs = covs,
                                            Y.family = "gaussian", 
                                            M.family = "gaussian")

# Merge results with feature metadata 
result_hima_early_fin <- result_hima_early %>%
  mutate(across(where(is.character), ~na_if(., "")), 
         omic_layer = get_omic_layer(ftr_name))

# Filter to significant features only and scale % total effect to 100
result_hima_early_fin <- result_hima_early_fin %>% 
  tidylog::filter(BH.FDR < 0.05) %>%
  mutate(pte = 100*`% total effect`/sum(`% total effect`), 
         sig = if_else(BH.FDR < 0.05, 1, 0))

# Format for figures
early <- result_hima_early_fin %>%
  dplyr::select(ftr_name, 'alpha*beta', pte, alpha, beta, sig) %>%
  mutate(omic_layer = get_omic_layer(ftr_name)) %>%
  rename(ie = 'alpha*beta', 
         `% Tot.\nEffect` = pte)

# Pivot longer for figure
early_long <- early %>% 
  pivot_longer(cols = c(`% Tot.\nEffect`:beta), 
               names_to = "name") %>%
  arrange(ftr_name) |>
  mutate(name = factor(name, levels = c("alpha", "beta", "% Tot.\nEffect")))

# Plot features
ggplot(early_long, 
       aes(x = ftr_name, 
           y = value,
           fill = omic_layer)) + 
  geom_bar(stat = "identity") +
  facet_grid(name ~ omic_layer, 
             scales = "free",
             space = "free_x") +
  scale_fill_manual(values = c(sankey_colors$range[2], 
                               sankey_colors$range[5], 
                               sankey_colors$range[4], 
                               sankey_colors$range[3], 
                               sankey_colors$range[6])) +
  geom_hline(yintercept = 0, linetype = 1, color = "grey50") + 
  ylab(NULL) + xlab(NULL) +
  theme(
    strip.background = element_blank(),
    strip.text.x = element_blank(),
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
    legend.title = element_blank(), 
    legend.position = "bottom", # Place the legend at the bottom
    legend.justification = c(1, 0))
```

## *Intermediate Integration*

1.  ***Regression 1 (linear regression):***

```{=tex}
\begin{equation}
m_i = a_0 + a_1 \times x
\label{eq:reg1}
\end{equation}
```
|    Where $x$ is the exposure and $m_i$ is each mediator.

2.  ***Regression 2 (group lasso):***

```{=tex}
\begin{equation}
y = b_0 + b_1 \times x + b_{2_i} \times M
\label{eq:reg2}
\end{equation}
```
|    Where $y$ is the outcome, $x$ is the exposure, $M$ is the mediator matrix with corresponding estimate $b_{2_i}$. The bootstrapped standard error (se) of $b_{2_i}$ is used for calculating mediation confidence intervals.

3.  ***Calculate mediation confidence interval for mediator ( i ):***

```{=tex}
\begin{align}
\alpha &= a_1 \label{eq:alpha}\\
\text{se of } \alpha &= \text{se of } a_1 \label{eq:se_alpha}\\
\beta &= b_{2_i} \label{eq:beta}\\
\text{se of } \beta &= \text{se of } b_{2_i} \label{eq:se_beta}
\end{align}
```
*Note: For the following code, we would normally set n_boot to a higher value (1000 or more). Here, it is set to 12 to improve the speed of the function.*

```{r 2. intermediate integration analysis, cache=TRUE}
# Run Analysis
result_hima_intermediate <- hima_intermediate_integration(
  omics_lst = omics_lst,
  covs = covs,
  outcome = outcome,
  exposure = exposure,
  n_boot = 12,
  Y.family = "gaussian")

# Merge results with feature metadata 
result_hima_intermediate_fin <- result_hima_intermediate %>%
  mutate(across(where(is.character), ~na_if(., "")),
         omic_layer = get_omic_layer(ftr_name))

# Filter to significant only and scale % total effect to 100
result_hima_intermediate_fin <- result_hima_intermediate_fin %>% 
  tidylog::filter(sig_intermediate == 1) %>%
  mutate(pte_intermediate = 100*pte_intermediate/sum(pte_intermediate))

# Format for plots
intermediate <- result_hima_intermediate_fin %>%
  dplyr::select(ftr_name, indirect, pte_intermediate, alpha, 
                beta_bootstrap,  sig_intermediate) %>%
  rename(ie_intermediate = indirect, 
         alpha_intermediate = alpha, 
         beta_intermediate = beta_bootstrap)
```

## *Late integration*

```{r 3. late integration analysis}
# Run Analysis
result_hima_late <- hima_late_integration(exposure = exposure,
                                          outcome = outcome, 
                                          omics_lst = omics_lst, 
                                          covs = covs, 
                                          Y.family = "gaussian", 
                                          M.family = "gaussian")

# Merge results with feature metadata 
result_hima_late_fin <- result_hima_late %>% 
  mutate(across(where(is.character), ~na_if(., "")), 
         omic_layer = get_omic_layer(ftr_name))

# Filter to significant features only, scale % total effect to 100
result_hima_late_fin <- result_hima_late_fin %>% 
  tidylog::filter(BH.FDR < 0.05) %>%
  mutate(pte_late = 100*`% total effect`/sum(`% total effect`), 
         sig_late = if_else(BH.FDR < 0.05, 1, 0))

# Format for plots
late <- result_hima_late_fin %>%
  dplyr::select(ftr_name, 'alpha*beta', pte_late, alpha, beta, sig_late) %>%
  rename(ie_late = 'alpha*beta', 
         alpha_late = alpha, 
         beta_late = beta)
```

## Figures: High dimensional mediation plots.

First, prepare the results for figures.

```{r 4. Prepare Results for Figures}

# Combine all results
high_dim_res <- tidylog::full_join(early, late, by = "ftr_name") %>%
  tidylog::full_join(intermediate, by = "ftr_name") %>%
  mutate(omic_layer = get_omic_layer(ftr_name), 
         across(where(is.numeric), ~replace_na(., 0))) %>%  
  rowwise() %>%
  mutate(sum_pte = sum(c(pte_early + pte_late, pte_intermediate), 
                       na.rm = TRUE),
         sum_ie = sum(c(ie_early + ie_late, ie_intermediate), 
                      na.rm = TRUE),
         ftr_name = fct_reorder(ftr_name, sum_pte)) %>%
  ungroup()

# Pivot data longer
high_dim_res_long <- high_dim_res %>%
  pivot_longer(cols = c(ie_early:sig_intermediate), 
               names_to = c(".value", "method"), 
               names_sep = "_") %>%
  arrange(ftr_name) %>%
  mutate(method = str_to_title(method),
         omic_layer = as.factor(omic_layer) %>%
           fct_relevel(c("Methylation", 
                         "Transcriptome", 
                         "miRNA", 
                         "Proteins")), 
         sig_chr = if_else(sig == 1, "*", ""))
```

### *Correlation heatmap*

```{r 5. correlation plot}
# Select the unique features from high dimensional mediation results
omics_df_subset <- omics_df %>%
  dplyr::select(unique(high_dim_res_long$ftr_name)) 

# Compute the correlation matrix for the omics dataframe
cormat <- cor(omics_df_subset)


# Annotations
annotation <- data.frame(
  ftr_name = colnames(cormat),
  Type = get_omic_layer(colnames(cormat)), 
  index = 1:ncol(cormat)) |>
  dplyr::mutate(Type = case_when(
    Type == "Metabolome" ~ "Met.", 
    Type == "Proteins" ~ "Prot.", 
    Type == "Transcriptome" ~ "Gene\nExpression", 
    Type == "Methylation" ~ "DNA\nMethylation", 
    TRUE ~ Type))


# Make Plot
Heatmap(cormat, 
        row_split = annotation$Type,
        column_split = annotation$Type,
        show_row_names = FALSE,
        show_column_names = FALSE, 
        heatmap_legend_param = list(title = "Correlation"))
```

## *Comparison across Integration Methods*

***High dimensional mediation with early (a), intermediate (b), and late (c) integration***

```{r 6. HIMA plot, fig.height=10}
# Pivot longer for figure
hima_plot_dat <- high_dim_res_long %>% 
  pivot_longer(cols = pte:beta) %>% 
  mutate(name = case_when(name == "alpha"~ "Alpha",
                          name == "beta" ~ "Beta",
                          name == "pte" ~ "TE (%)"))

data <- hima_plot_dat

hima_plot <- function(data, method_name, 
                      legend.position = "none", 
                      axis.text.x = element_text(angle = 90, hjust = 1)){
  data %>%
    dplyr::filter(method == method_name) %>% 
    ggplot(aes(x = ftr_name_for_plots, 
               y = value,
               fill = omic_layer, 
               alpha = sig_chr,
               label = sig_chr)) + 
    geom_bar(stat = "identity") +
    facet_grid(name ~ omic_layer, 
               scales = "free",
               space = "free_x") + 
    scale_fill_manual(values = c(sankey_colors$range[2], 
                                 sankey_colors$range[5], 
                                 sankey_colors$range[4], 
                                 sankey_colors$range[3], 
                                 sankey_colors$range[6])) +
    scale_alpha_manual(values = c(.25, 1), guide = "none") + 
    geom_hline(yintercept = 0, linetype = 1, color = "grey50") + 
    ylab(NULL) + xlab(NULL) +
    theme(
      strip.background = element_blank(),
      strip.text.x = element_blank(),
      axis.text.x = axis.text.x,
      legend.title = element_blank(), 
      legend.position = legend.position, # Place the legend at the bottom
      legend.box = "horizontal", # Align the legend horizontally
      legend.margin = margin(0, 0, 0, 0), # Remove margins around legend
      legend.box.margin = margin(0, 0, 0, 0), # Adjust legend margin
      legend.direction = "horizontal", # Align the legend horizontally
      legend.justification = c(1, 0))
}

# Early integration Plot
early_plot <- hima_plot(hima_plot_dat, 
                        method = "Early",
                        legend.position = "none", 
                        axis.text.x = element_blank())

# Intermediate integration Plot
intermediate_plot <- hima_plot(hima_plot_dat, 
                               method = "Intermediate",
                               legend.position = "none", 
                               axis.text.x = element_blank())

# Late integration Plot
late_plot <- hima_plot(hima_plot_dat,
                       method = "Late",
                       legend.position = "bottom")

# Combine Plots
plot_grid(NULL, early_plot, 
          NULL, intermediate_plot, 
          NULL, late_plot,
          ncol = 1,
          rel_heights = c(.03, 0.35, .03, 0.35, 0.03, 0.65),
          labels = c("a) Early", "","b) Intermediate","", "c) Late",""))
```
