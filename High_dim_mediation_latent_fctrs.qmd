# Mediation with latent factrs {#sec-med_lf}

## Set up project for mediation with latent factors

```{r set up data, include = FALSE, echo = FALSE}
source(fs::path(here::here(),"project_setup","directories.R"))
source(fs::path(dir_proj,"libraries.R"))
source(fs::path(dir_proj,"load_simu_data.R"))
source(fs::path(dir_proj, "functions", 
                "load_functions.R"))
source(fs::path(dir_proj,
                "functions", "functions_for_med_lat_fctrs.R"))

# 
options(knitr.table.format = "html")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Set up graphical parameters 
panel_a_te_lim <- c(-1,55)
```

## Analysis: Mediation with latent factors

**Two step analysis: factorize/cluster mediators (omics data) first, then use the factors/cluster label as latent mediator, and finally conduct mediation analysis**

## *Early integration*

### a. Analysis: Early integration

**Select PCs that can explain 80% of the total variance in the data**

```{r 1a. early integration analysis}
# i. Obtain PCs----
omics_df_pca <- prcomp(omics_df, center = TRUE, scale. = TRUE)

# Calculate variance and proportion of variance explained by each PC
vars <- apply(omics_df_pca$x, 2, var)
props <- vars / sum(vars)
cum_props <- cumsum(props)

# Create a tibble to store the proportion of variance explained
props_df <- tibble(pc_num = names(props), 
                   pc_var_explained = props)

# Determine the number of PCs needed to explain > 80% of the total variance
n_80_pct <- min((1:length(cum_props))[cum_props > 0.8])

# the first 55 PCs are used as latent mediators
PCs <- omics_df_pca$x[, 1:n_80_pct] %>% scale()

# ii. Perform HIMA----
result_hima_comb_pc <- hima(X = exposure,
                            Y = outcome,
                            M = PCs,
                            COV.MY = covs,
                            COV.XM = covs,
                            Y.family = c("gaussian"),
                            M.family = c("gaussian"), 
                            scale = FALSE)

# Modify DF
result_hima_pca_early <- result_hima_comb_pc %>%
  as_tibble(rownames = "pc_num") %>%
  left_join(props_df) %>% 
  mutate(multiomic_mthd = "Early",
         mediation_mthd = "Latent Factors (PCA)",
         te_direction = if_else(beta<0, -1*`% total effect`, 
                                `% total effect`)) %>%
  dplyr::select(multiomic_mthd, mediation_mthd, 
                pc_num, 
                everything())

# Filter Significant PCs, Create scaled %TE variable
result_hima_pca_early_sig <- result_hima_pca_early %>% 
  tidylog::filter(BH.FDR < 0.05) %>% 
  mutate(`% Total Effect scaled` = 100*`% total effect`/sum(`% total effect`) %>%
           round(1))

rm(vars, props, cum_props, props_df, n_80_pct, result_hima_pca_early)
```

#### b. Data for Figures: Early Integration

```{r 1b. early integration data processing, fig.height= 10, fig.width= 10}
# i. Data: Panel A Bargraph of mediation effects of PC's --------------
pca_early_long <- result_hima_pca_early_sig %>%
  mutate(pc_num_pct = str_c(pc_num, " (", 100*round(pc_var_explained, 2), "%)"), 
         pc_named = str_replace(pc_num, "PC", "Joint Comp. "),
         pcs_ordered = forcats::fct_reorder(pc_named, `te_direction`)) %>%
  dplyr::select(multiomic_mthd, pc_num, alpha, beta, `% Total Effect scaled`,
                pcs_ordered) %>%
  rename(Alpha = alpha, 
         Beta = beta,
         `TE (%)` = `% Total Effect scaled`) %>%
  pivot_longer(cols = c(Alpha, Beta, `TE (%)`))

# ii Data: Panel B: heatmap of correlation of features vs PC's --------------
# Extract variable correlation with principal components
var.cor <- cor(omics_df, omics_df_pca$x)

# Select only significant PCs
ftr_cor_sig_pcs <- var.cor[,(colnames(var.cor) %in% 
                               result_hima_pca_early_sig$pc_num)]

ftr_cor_sig_pcs_df <- ftr_cor_sig_pcs %>%
  as_tibble(rownames = "feature") %>%
  mutate(omic = get_omic_layer(feature))

# Pivot longer
ftr_early_pcs_long_all_ft <- ftr_cor_sig_pcs_df %>%
  pivot_longer(cols = all_of(result_hima_pca_early_sig$pc_num),
               names_to = "pc_num",
               values_to = "Correlation")

# Join with PCA long to get the ordered pcs
panel_b_dat_early_all_ft <- left_join(ftr_early_pcs_long_all_ft,
                                      pca_early_long %>%
                                        filter(name == "Alpha") %>%
                                        dplyr::select(pc_num, pcs_ordered))

# Get numeric omic layer for plotting
panel_b_dat_early_fin_all_ft <- panel_b_dat_early_all_ft %>%
  mutate(omic_num = get_omic_layer_numeric(feature)) %>%
  mutate(omic_num = ifelse(grepl("miR",feature), 3, omic_num))

# Add names of features for plotting
panel_b_dat_early_fin1_all_ft <- panel_b_dat_early_fin_all_ft %>%
  rename(ftr_name = feature)

# Select features for plots -------
## Select rows with values in the top 17 of their respective columns 
top <- apply(ftr_cor_sig_pcs, 2, function(x) x %in% tail(sort(abs(x)), 17)) # Edit here
selected_rows <- which(rowSums(top) > 0)
# Filter selected rows
ftr_cor_sig_pcs_top <- ftr_cor_sig_pcs[selected_rows, ] %>%
  as_tibble(rownames = "feature") %>%
  mutate(omic = get_omic_layer(feature))

# Get numeric omic layer for plotting
meta_ftr_early <- ftr_cor_sig_pcs_top %>%
  mutate(omic_num = get_omic_layer_numeric(feature)) %>%
  mutate(omic_num = ifelse(grepl("miR",feature), 3, omic_num)) %>%
  dplyr::select(feature, omic, omic_num)

# Add names of features for plotting
meta_ftr_plot_early <- meta_ftr_early %>%
  rename(ftr_name = feature)
```

## *Intermediate Integration*

The steps for intermediate integration start with performing a joint dimensionality reduction step using Joint and Individual Variance Explained (JIVE) [@RN18], and then performing high dimensional mediation on the resulting factors using HIMA [@RN33].

### Conduct JIVE

For this step, JIVE can estimate the optimal number of joint and individual ranks by changing the `method` argument in the function `jive`. For the simulated HELIX data, the optimal number, determined by setting `method = "perm"`, was 22 joint ranks and 6, 9, 5, 5, and 8 ranks for the methylome, transcriptome, miRNA, proteome, and metabolome, respectively.

```{r JIVE, cache = FALSE, message = FALSE, warning = FALSE, fig.height= 10, fig.width= 10}
# conduct JIVE
# Transpose omics matrices
omics_t <- lapply(omics_lst, t)

# Rename omics datasets
names(omics_t) = names(omics_lst)

# Run JIVE with the optimal ranks provided: 
result_jive2 <- jive(data = omics_t,
                     rankJ = 22,
                     rankA = c(6, 9, 5, 5, 8),
                     method = "given",
                     conv = 1e-04,
                     maxiter = 100,
                     showProgress = FALSE)

# Get the components from JIVE
factors_jive <- get_PCs_jive(result_jive2) %>% 
  dplyr::mutate(across(everything(), ~as.vector(scale(.))))

# Visualize the variance explained by the joint and individual JIVE components:
showVarExplained(result_jive2)
```

### Perform mediation analysis

```{r JIVE mediation,message = FALSE, warning = FALSE, fig.height= 10, fig.width= 10}
# run mediation analysis
result_hima_jive <- hima(X = exposure,
                         Y = outcome,
                         M = factors_jive,
                         COV.MY = covs,
                         COV.XM = covs,
                         Y.family = c("gaussian"),
                         M.family = c("gaussian"), 
                         verbose = TRUE,
                         scale = FALSE)

# Modify and filter significant                
result_hima_jive_1 <- result_hima_jive %>% 
  rownames_to_column("component") %>% 
  mutate(multiomic_mthd = "Intermediate",
         ind_joint = str_split_fixed(component, fixed("_"), 2)[,1], 
         ind_joint_num = case_when(ind_joint == "Joint" ~ 1, 
                                   ind_joint == "methylome" ~ 2,
                                   ind_joint == "transcriptome" ~ 3)) %>% 
  dplyr::select(multiomic_mthd, everything())

# Filter significant components and create scaled %TE variable
result_hima_jive_sig <-  result_hima_jive_1 %>% 
  tidylog::filter(BH.FDR<0.05) %>%   
  mutate(`% Total Effect scaled` = 100*`% total effect`/sum(`% total effect`) %>%
           round(1), 
         te_direction = if_else(beta < 0, 
                                -1 * `% total effect`, 
                                `% total effect`))
```

#### Step 4. data for plot JIVE factors

```{r JIVE figure,message = FALSE, warning = FALSE, fig.height= 10, fig.width= 10}
# Data: Panel A: Bargraph of mediation effects of PC's --------------
result_hima_jive_long <- result_hima_jive_sig %>%
  mutate(component = str_replace(component, "_", " ") %>% 
           toTitleCase(), 
         components_ord = forcats::fct_reorder(component, `te_direction`)) %>%
  rename(Alpha = alpha, 
         Beta = beta,
         `TE (%)` = `% Total Effect scaled`) %>%
  pivot_longer(cols = c(Alpha, Beta, `TE (%)`))

# Data:Panel B: heatmap of correlation of features vs PC's --------------

# Extract variable correlation with JIVE Factors
var.cor <- cor(omics_df, factors_jive) 

# Select only significant PCs
ftr_cor_sig_pcs_jive_all <- var.cor[,(colnames(var.cor) %in% 
                                        result_hima_jive_sig$component)] 

# Reshape the data
ftr_cor_sig_pcs_jive_all_l <- ftr_cor_sig_pcs_jive_all %>% 
  as_tibble(rownames = "Var1") %>% 
  pivot_longer(cols = -Var1, names_to = "Var2", values_to = "value")

# Merge p-values and top 10 cor
cor_p_val_data_JIVE_all <- ftr_cor_sig_pcs_jive_all_l %>% 
  mutate(omic = case_when(str_detect(Var1, "pro_") ~ "Proteins", 
                          str_detect(Var1, "miR") ~ "miRNA", 
                          str_detect(Var1, "cg") ~ "Methylation", 
                          str_detect(Var1, "TC") ~ "Transcriptome", 
                          str_detect(Var1, "met") ~ "Metabolome", 
                          TRUE ~ "error"),
         omic_num = case_when(str_detect(Var1, "cg") ~ 1, 
                              str_detect(Var1, "TC") ~ 2, 
                              str_detect(Var1, "miR") ~ 3,
                              str_detect(Var1, "pro_") ~ 4, 
                              str_detect(Var1, "met") ~ 5, 
                              TRUE ~ 9),
         Var1 = str_remove(Var1, "met_") %>%
           str_remove("hsa-") %>%
           str_remove("pro_"), 
         Var2 = str_replace(Var2, "_", " ") %>% 
           toTitleCase()) %>%
  rename(feature = Var1, 
         factor = Var2, 
         Correlation = value) %>%
  as_tibble()

# Change features which are in wrong JIVE individual component to zero
cor_p_val_data_JIVE_with_zeros_all <- cor_p_val_data_JIVE_all %>%
  mutate(
    in_ind_omic = str_sub(factor, 1, 5) == str_sub(omic, 1, 5),
    Correlation = if_else(in_ind_omic | str_detect(factor, "Joint"), 
                          Correlation, 0)) %>%
  left_join(result_hima_jive_long %>% dplyr::select(component, ind_joint_num), 
            by= c("factor" = "component"), 
            relationship = "many-to-many")

# Add names of features for plotting
cor_p_val_data_JIVE_with_zeros1_all <- cor_p_val_data_JIVE_with_zeros_all %>%
  rename(ftr_name = feature)

# Select features for plots -------
# Select rows with values in the top 10 of their respective columns
top10 <- apply(ftr_cor_sig_pcs_jive_all, 2, function(x) x %in% tail(sort(abs(x)), 11))
selected_rows <- which(rowSums(top10) > 0)
ftr_cor_sig_pcs_top10 <- ftr_cor_sig_pcs_jive_all[selected_rows, ] %>%
  data.frame() %>% 
  rownames_to_column("feature")


meta_ftr_jive <- ftr_cor_sig_pcs_top10 %>% 
  mutate(omic = get_omic_layer(feature),
         omic_num = get_omic_layer_numeric(feature)) %>%
  mutate(omic_num = ifelse(omic == "miRNA", 3, omic_num))

meta_ftr_plot_jive <- meta_ftr_jive %>%
  rename(ftr_name = feature) 
```

## *Late integration*

### a. Analysis: PCA and then HIMA (Late integration)

```{r pca late integration with HIMA on all omics together, message = FALSE, warning = FALSE, fig.height= 10, fig.width= 10}
# i. get PCs and HIMA -----
# PCA scores: Apply function to each matrix in the list and collect 
scores_list_late_int <-  map2(omics_lst, 
                              names(omics_lst), 
                              ~run_pca(.x, .y)$scores)
scores_df <- purrr::reduce(scores_list_late_int, cbind) %>% as.data.frame()

# Loadings: Apply function to each matrix in the list and collect PC 
loadings_list_late_int <- map2(omics_lst, 
                               names(omics_lst),
                               ~run_pca(.x, .y)$loadings)
loadings_df <- purrr::reduce(loadings_list_late_int, full_join)


# Numcber of PCs explain >80%: Get number of PCs for each omic
late_int_pcs_80 <- purrr::map(omics_lst, ~run_pca(.x, NULL)$n_pcs_80_pct) %>%
  bind_rows()

# PC percent var explained within each omic
props_var_pcs <- purrr::map2(omics_lst, 
                             names(omics_lst),
                             ~run_pca(.x, .y)$pc_var_explained)
props_var_pcs <- purrr::reduce(props_var_pcs, bind_rows)

# ii. run HIMA with the current dataset and principal components ----
result_hima_late_integration <- hima(X = exposure,
                                     Y = outcome,
                                     M = scores_df, 
                                     COV.MY = covs,
                                     COV.XM = covs,
                                     Y.family = c("gaussian"),
                                     M.family = c("gaussian"), 
                                     verbose = TRUE, 
                                     scale = FALSE) 

# Modify and save DF
result_hima_late_integration <- result_hima_late_integration %>%
  as_tibble(rownames = "pc_num") %>%
  left_join(props_var_pcs) %>% 
  mutate(multiomic_mthd = "Late",
         mediation_mthd = "Latent Factors (PCA)",
         te_direction = if_else(beta<0, -1*`% total effect`, 
                                `% total effect`)) %>%
  dplyr::select(multiomic_mthd, mediation_mthd, 
                pc_num, 
                everything())

# Filter significant pcs, create scaled %TE variable
result_hima_pca_late_sig <- result_hima_late_integration %>% 
  tidylog::filter(BH.FDR < 0.05) %>%
  mutate(pc_numeric = str_split_fixed(pc_num, fixed("_"), 2)[,2],
         omic_layer = str_split_fixed(pc_num, fixed("_"), 2)[,1] %>%
           str_to_sentence(),
         omic_pc = str_c(omic_layer, " ", pc_numeric) %>%
           str_replace("PC", "Comp. ")) %>%
  mutate(`% Total Effect scaled` = 100*`% total effect`/sum(`% total effect`) %>%
           round(1))
```

#### b. Data for Figures: PCA and then HIMA (Late integration)

```{r figs pca late int, message = FALSE, warning = FALSE, fig.height= 10, fig.width= 10}
# i. Data: Panel A Bargraph of mediation effects of PC's --------------
pca_late_long <- result_hima_pca_late_sig %>%
  mutate(pcs_ordered = forcats::fct_reorder(omic_pc, `te_direction`)) %>%
  dplyr::select(multiomic_mthd, omic_pc, omic_layer, pc_num, pcs_ordered,
                alpha, beta, `% Total Effect scaled`) %>%
  rename(Alpha = alpha, 
         Beta = beta,
         `TE (%)` = `% Total Effect scaled`) %>%
  pivot_longer(cols = c(Alpha, Beta, `TE (%)`)) %>%
  mutate(omic_num = get_omic_layer_numeric(omic_layer))

# ii. Data: Panel B: heatmap of correlation of features vs PC's-----
# Extract variable correlation with principal components
scores_full_list_late_int <- map2(omics_lst, 
                                  names(omics_lst),
                                  ~run_pca(.x, .y)$scores_full)

scores_df_full <- purrr::reduce(scores_full_list_late_int, cbind) %>% as.data.frame()

# Correlation of omics and PCs
var_cor_methylome <- cor(omics_lst$methylome,
                         scores_full_list_late_int$methylome) %>%
  as.data.frame()

var_cor_transcriptome <- cor(omics_lst$transcriptome, 
                             scores_full_list_late_int$transcriptome) %>%
  as.data.frame()

var_cor_miRNA <- cor(omics_lst$miRNA, 
                     scores_full_list_late_int$miRNA)%>%
  as.data.frame()

var_cor_proteome <- cor(omics_lst$proteome, 
                        scores_full_list_late_int$proteome)%>%
  as.data.frame()

var_cor_metabolome <- cor(omics_lst$metabolome, 
                          scores_full_list_late_int$metabolome)%>%
  as.data.frame()

var.cor <- var_cor_methylome %>% 
  bind_rows(var_cor_transcriptome) %>% 
  bind_rows(var_cor_miRNA) %>%
  bind_rows(var_cor_proteome) %>%
  bind_rows(var_cor_metabolome)

# Select only significant PCs
ftr_cor_sig_pcs_late <- var.cor %>%
  dplyr::select(result_hima_pca_late_sig$pc_num) 

# Rownames to column
ftr_cor_sig_pcs_late1 <- ftr_cor_sig_pcs_late %>%
  rownames_to_column("feature")

# Pivot longer
ftr_late_pcs_long_full <- pivot_longer(ftr_cor_sig_pcs_late1, 
                                       cols = colnames(ftr_cor_sig_pcs_late1[,-1]), 
                                       names_to = "pc_num", 
                                       values_to = "Correlation") %>%
  mutate(omic = get_omic_layer(feature))

# Join with PCA long to get the ordered pcs 
panel_b_dat_late_full <- left_join(ftr_late_pcs_long_full, 
                                   pca_late_long %>%
                                     filter(name == "Alpha") %>%
                                     dplyr::select(pc_num, pcs_ordered))


panel_b_dat_late_fin_full <- panel_b_dat_late_full %>%
  mutate(omic_num = get_omic_layer_numeric(feature),
         omic_num2 = get_omic_layer_numeric(pc_num),
         feature = str_remove(feature, "met_") %>%
           str_remove("hsa-") %>%
           str_remove("pro_")) 


# Add names of features for plotting
panel_b_dat_late_fin1_all <- panel_b_dat_late_fin_full %>%
  rename(ftr_name = feature)
 

# Select features for plots -------
# Select rows with values in the top 18 of their respective columns
top_late_int <- apply(ftr_cor_sig_pcs_late %>%
                        janitor::remove_empty(which = "rows"), 
                      2,
                      function(x) x %in% tail(sort(abs(x)), 18))
selected_rows <- which(rowSums(top_late_int, na.rm = TRUE) > 0)

ftr_cor_sig_pcs_late <- ftr_cor_sig_pcs_late[selected_rows, ]

# Rownames to column
ftr_cor_sig_pcs_late <- ftr_cor_sig_pcs_late %>%
  rownames_to_column("feature")

meta_ftr_late <- ftr_cor_sig_pcs_late %>%
  mutate(omic = get_omic_layer(feature),
         omic_num = get_omic_layer_numeric(feature),
         omic_num2 = omic_num,
         feature = str_remove(feature, "met_") %>%
           str_remove("hsa-") %>%
           str_remove("pro_")) 

# Add names of features for plotting
meta_ftr_plot_late <- meta_ftr_late %>%
  rename(ftr_name = feature)
```

## Figures: Mediation with Latent Factors

```{r combine data}
# Combine mediation results into single df
data_long_plot <- result_hima_jive_long %>% 
  dplyr::rename(pcs_ordered = components_ord) %>%
  bind_rows(pca_early_long, 
            pca_late_long) %>%
  dplyr::select(pcs_ordered, name, value, multiomic_mthd) %>% 
  rename(method = multiomic_mthd)

# Get order of PCs based on 
mediation_results_wide <- data_long_plot %>% 
  pivot_wider(id_cols = c(pcs_ordered, method),
              names_from = name, 
              values_from = value)

# Get PC names and order for figures
mediation_results_wide <- mediation_results_wide %>%
  mutate(factor_type = str_split_fixed(as.character(pcs_ordered), " ", 2)[,1],
         factor_renamed = pcs_ordered %>%
           str_replace("Joint", "Joint Comp.") %>%
           str_replace("Methylome", "Methylome Comp.") %>%
           str_replace("Transcriptome", "Transcriptome Comp.") %>%
           str_replace("Comp. Comp.", "Comp."), 
         factor_renamed_fin = ifelse(`TE (%)` > 15,
                                     paste0(factor_renamed, "*"), 
                                     factor_renamed)) %>%
  arrange(method, factor_type, Beta, `TE (%)`) %>%
  mutate(factor_renamed = fct_inorder(factor_renamed),
         factor_renamed_fin = fct_inorder(factor_renamed_fin),
         pcs_ordered = fct_inorder(pcs_ordered))

fct_names_ordered <- mediation_results_wide %>%
  dplyr::select(-c(Alpha:`TE (%)`))

# Reorder PCs
data_long_plot <- data_long_plot %>% 
  tidylog::left_join(fct_names_ordered) %>% 
  mutate(pcs_ordered = factor(pcs_ordered, 
                              levels = fct_names_ordered$pcs_ordered))
```

### A) Joint Components: Mediation bargraph results (Fig 4a)

```{r mediation bargraph}
# Plot  
(hima_plot <- ggplot(data_long_plot, 
                     aes(x = pcs_ordered, 
                         y = value)) +
   geom_bar(stat = "identity", fill = "grey50") + 
   geom_hline(yintercept = 0) +
   facet_grid(name ~ method,
              scales = "free",
              space = "free_x", switch = "y") + 
   # labs(y = NULL) +
   facetted_pos_scales(
     y = list(
       name == "Alpha"  ~ scale_y_continuous(
         limits = c(-.45,.45), breaks = c(-0.4, 0, .4)),
       name == "Beta"   ~ scale_y_continuous(
         limits = c(-.45,.45), breaks = c(-0.4, 0, .4)),
       name == "TE (%)" ~ scale_y_continuous(
         limits = panel_a_te_lim, n.breaks = 4))) + 
   theme(axis.title = element_blank(), 
         title = element_text(hjust = 0),
         strip.placement = "outside",
         axis.text.x = element_text(size = 15,angle = 90, hjust = 1),
         # strip.text.y = element_blank(),
         # strip.text.x = element_blank(),
         axis.text.y = element_text(size = 15),
         # axis.text.x = element_text(size = 8),
         strip.background = element_blank(),
         text = element_text(size = 15)))

# # Save figure 
# ggsave(hima_plot,
#        filename = fs::path(dir_figs,
#                            "3_high_dim_multivar_mediation_latent_fctrs",
#                            "Fig 4a Mediation coefficient 070723.jpeg"),
#        width = 5,
#        height = 5,
#        dpi = 3000,
#        bg = "white")
```

### Comparison of Component and Feature Associations Across Methods

```{r Mediation results plot}
# Panel A: Early integration ----
# Combine with reordered factor data
panel_b_dat_early_fin1_all_ft1 <- panel_b_dat_early_fin1_all_ft %>%
  tidylog::left_join(fct_names_ordered)

# Plot
(panel_b_early <- ggplot(data = panel_b_dat_early_fin1_all_ft1,
                        aes(x = ftr_name,
                            # factor(,levels = c(feature_name_reorder)), 
                            y = fct_rev(factor_renamed_fin), 
                            fill = Correlation)) +
  geom_tile(color = "white") +
  facet_grid(~omic, scales = "free") +
  scale_fill_gradient2(low  = "blue",
                       mid  = "white",
                       high = "red",
                       midpoint = 0,
                       limits = c(-1, 1),
                       breaks = c(-1, 0, 1),
                       na.value = "grey20") +
  theme(
    axis.text.x = element_blank(),
    strip.text = element_blank(),
    axis.title = element_blank(), 
    axis.ticks.x = element_blank(),
    legend.position = "none",
    text = element_text(size = 20)) )

# Panel B. Intermediate----
# Combine with reordered factor data
cor_p_val_data_JIVE_with_zeros1_all1 <- cor_p_val_data_JIVE_with_zeros1_all %>% 
  tidylog::left_join(fct_names_ordered %>% 
                       filter(method == "Intermediate") %>% 
                       mutate(pcs_ordered2 = pcs_ordered), 
                     by = c("factor" = "pcs_ordered2")) %>% 
  arrange(pcs_ordered) %>% 
  mutate(factor_renamed_fin = fct_inorder(factor_renamed_fin))

# Replace 0 with NA and filter only features for plotting
cor_p_val_data_JIVE_final_for_fin <- cor_p_val_data_JIVE_with_zeros1_all1 %>%
  mutate(Correlation = ifelse(Correlation== 0, NA, Correlation)) 

# Plot
(panel_b_JIVE <- ggplot(data = cor_p_val_data_JIVE_final_for_fin , 
                       aes(x = ftr_name, 
                           # factor(, levels = c(feature_name_reorder)), 
                           y = fct_rev(factor_renamed_fin), 
                           fill = Correlation)) +
  geom_tile(color = "white") + 
  scale_fill_gradient2(low  = "blue", mid  = "white", high = "red",
                       midpoint = 0,
                       limits =  c(-1, 1),
                       breaks = c(-1,0,1),
                       na.value = "grey") +
  facet_grid(ind_joint_num~ omic,
             scales = "free", space = "free", shrink = TRUE) +
  theme(
    # axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
    axis.text.x = element_blank(),
    strip.text = element_blank(),
    # axis.text.y = element_blank(),
    axis.title = element_blank(), 
    axis.ticks.x = element_blank(),
    # axis.line.x = element_blank(),
    legend.position = "none",
    panel.spacing.y = unit(-.1, "lines"),
    text = element_text(size = 30)))


# Panel C. Late Integration----
# Combine with reordered factor data
panel_b_dat_late_fin1_all1 <- panel_b_dat_late_fin1_all %>% 
  tidylog::left_join(fct_names_ordered) 


(panel_b_late <- ggplot(data = panel_b_dat_late_fin1_all1, 
                       aes(x = ftr_name, 
                           # factor(,levels = c(feature_name_reorder)), 
                           y = fct_rev(factor_renamed_fin), 
                           fill = Correlation)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red",
                       midpoint = 0,
                       limits = c(-1, 1),
                       breaks = c(-1,0,1),
                       na.value = "grey") +
  facet_grid(omic_num2 ~ omic,
             scales = "free",
             space = "free",
             shrink = TRUE) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
        # axis.text.y = element_blank(),
        strip.text = element_blank(),
        legend.position = "none",
        panel.spacing.y = unit(-.1, "lines"),
        axis.title = element_blank(), 
        # axis.line.x = element_blank(), 
        # axis.ticks = element_blank(),
        text = element_text(size = 20)))


# Fig 5a: Join plots ----
(fig_med_lf_ftr_comp <- cowplot::plot_grid(
  NULL, panel_b_early,  NULL, panel_b_JIVE, NULL, panel_b_late,
  ncol = 1, align = "hv", axis = "lr",
  rel_heights  = c(.1, .75, .1, 1.25, .1, 1),
  labels = c("a) Early","", "b) Intermediate","", "c) Late",""),
  label_x = c(-0.016, 0, -0.04, 0, -0.015,0)))
```

### Pathway Analysis.

Following this analysis, you can use the correlation p-values to perform pathway analysis with appropriate pathway analysis software.


## Alternate Approaches

```{r}
# library(IntNMF)
# library(omicade4)
# library(MOFA2)
# library(tensorBSS)
# library(RGCCA)
```
